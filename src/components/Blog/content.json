{/*Simplify your JavaScript – Use .map(), .reduce(), and .filter()


If you’re starting in JavaScript, maybe you haven’t heard of .map(), .reduce(), and .filter(). For me, it took a while as I had to support Internet Explorer 8 until a couple years ago. But if you don’t need to be compatible with this very old browser, you have to become familiar with those methods.





Take note that this article most likely applies to whatever other programming language you might be using, as these are concepts that exist in many other languages.



.map()


Let me explain how it works with a simple example. Say you have received an array containing multiple objects – each one representing a person. The thing you really need in the end, though, is an array containing only the id of each person.



// What you have
var officers = [
  { id: 20, name: 'Captain Piett' },
  { id: 24, name: 'General Veers' },
  { id: 56, name: 'Admiral Ozzel' },
  { id: 88, name: 'Commander Jerjerrod' }
];
// What you need
[20, 24, 56, 88]


There are multiple ways to achieve this. You might want to do it by creating an empty array, then using .forEach(), .for(...of), or a simple .for() to meet your goal.



Let’s compare!





Using .forEach():



var officersIds = [];

officers.forEach(function (officer) {
  officersIds.push(officer.id);
});




Notice how you have to create an empty array beforehand? Let’s see what it looks like when using .map():


var officersIds = officers.map(function (officer) {
  return officer.id
});


We can even be more concise with arrow functions (requires ES6 support, Babel or TypeScript)



const officersIds = officers.map(officer => officer.id);


So how does .map() work? Basically is takes 2 arguments, a callback and an optional context (will be considered as this in the callback) which I did not use in the previous example. The callback runs for each value in the array and returns each new value in the resulting array.

Keep in mind that the resulting array will always be the same length as the original array.



*/}



